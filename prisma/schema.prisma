generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id    String @id @unique // matches kinde user id
  email String @unique

  File File[] // we are telling prisma that a user can have multiple files

  Message Message[]

  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
}

enum UploadStatus{ // we are depicting all the status during the file upload
  PENDING
  PROCESSING
  FAILED
  SUCCESS
}

model File {
  id String @id @default (cuid())
  name String

  uploadStatus UploadStatus @default(PENDING)
  url String
  key String    //this is how we differentiate a specific file
  messages Message[]

  createdAt DateTime @default (now()) 
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

//for the chatwrapper message box the chat context

model Message {
  id   String @id @default(cuid())
  text String @db.Text()

  isUserMessage Boolean //because we need to differentiate between the user messages and AI Messages

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
  File      File?    @relation(fields: [fileId], references: [id])
  fileId    String?
}

